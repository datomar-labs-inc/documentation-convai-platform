(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{179:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return l}));var a=t(1),r=t(9),s=(t(0),t(269)),o={id:"update-session",title:"Update Session",sidebar_label:"Update Session"},i={id:"go-sdk/apis/update-session",title:"Update Session",description:"The ```UpdateSession()``` method is used to update the session data of a session. It returns a response and an error (error will not be nil if there's an error). The response is a **[Session](../types#session)** type that is the session updated.",source:"@site/docs/go-sdk/apis/update-session.mdx",permalink:"/go-sdk/apis/update-session",sidebar_label:"Update Session",sidebar:"someSidebar",previous:{title:"Query Executions",permalink:"/go-sdk/apis/query-executions"},next:{title:"Delete Session",permalink:"/go-sdk/apis/delete-session"}},c=[{value:"Reference",id:"reference",children:[]}],p={rightToc:c};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"UpdateSession()")," method is used to update the session data of a session. It returns a response and an error (error will not be nil if there's an error). The response is a ",Object(s.b)("strong",{parentName:"p"},Object(s.b)("a",Object(a.a)({parentName:"strong"},{href:"../types#session"}),"Session"))," type that is the session updated."),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"UpdateSession()")," method expects the ID of channel user which is a string type and the input which is ",Object(s.b)("strong",{parentName:"p"},Object(s.b)("a",Object(a.a)({parentName:"strong"},{href:"../types#updateuserdatainput"}),"UpdateUserDataInput"))," type. You can get the channel user ID in ",Object(s.b)("inlineCode",{parentName:"p"},"Users > Click on the user > find the channel user id above Session Data section on the right"),"."),Object(s.b)("h4",{id:"current-session"},"Current Session"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    //hide for brief\n    "session": {\n        "data": {\n          "random": "randomData"\n        },\n        "stack": {\n        "frames": [\n            {\n            "m": 0,\n            "n": 0,\n            "v": null\n            }\n        ]\n        },\n        "ver": "",\n        "id": "9699c618-b91f-48da-99ef-26bb1fdedf93"\n    },\n    //......\n}\n')),Object(s.b)("h4",{id:"example-code"},"Example Code"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "fmt"\n    "encoding/json"\n    "github.com/datomar-labs-inc/convai-sdk-go"\n)\n\nconst API_KEY = "YOUR API KEY"\n\nfunc main() {\n    convaiClient := convai.NewAPIClient(API_KEY)\n\n    var deleteData []string\n    deleteData = append(deleteData, "random")\n    updateData := make(map[string]interface{})\n    updateData["foo"] = "bar"\n    updateData["jhon"] = "snow"\n\n    // notice that the id we use here is the channel user id of the session\n    res, err := convaiClient.UpdateSession("dev-console-81085beb-a6fd-48dd-ad09-522da3b6b251",&convai.UpdateUserDataInput{\n        Set:    updateData,\n        Delete: deleteData,\n    })\n\n    if err != nil {\n        fmt.Println(err.Error())\n    } else {\n        prettyRes, _ := json.MarshalIndent(&res, "", "\\t")\n        fmt.Println(string(prettyRes))\n    }\n}\n')),Object(s.b)("h4",{id:"example-response"},"Example Response"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "data": {\n    "foo": "bar",\n    "jhon": "snow"\n  },\n  "stack": {\n    "frames": [\n      {\n        "m": 0,\n        "n": 0,\n        "v": null\n      }\n    ]\n  },\n  "ver": "",\n  "id": "9699c618-b91f-48da-99ef-26bb1fdedf93"\n}\n')),Object(s.b)("h2",{id:"reference"},"Reference"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"UpdateSession(userID string, input *UpdateUserDataInput) (*Session, error)")),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Required"),Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"userId"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"string"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Required"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Channel User ID")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"input"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"*","UpdateUserDataInput"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Required"),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"UpdateUserDataInput type")))))}l.isMDXComponent=!0},269:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),l=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},b=function(e){var n=l(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(t),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||s;return t?r.a.createElement(m,i({ref:n},p,{components:t})):r.a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);