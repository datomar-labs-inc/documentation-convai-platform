(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{169:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var o=n(1),a=n(9),i=(n(0),n(219)),s=(n(221),{id:"building-a-bot",title:"Building a Bot",sidebar_label:"2. Building a Bot",description:"Step by step guide to make your first simple bot on Convai Studio"}),r={id:"convai-studio/simple-bot/building-a-bot",title:"Building a Bot",description:"Step by step guide to make your first simple bot on Convai Studio",source:"@site/docs/convai-studio/simple-bot/2-building-bot.mdx",permalink:"/convai-studio/simple-bot/building-a-bot",sidebar_label:"2. Building a Bot",sidebar:"someSidebar",previous:{title:"Understanding Convai",permalink:"/convai-studio/simple-bot/understanding-convai"},next:{title:"Introduction",permalink:"/convai-studio/nodes/introduction"}},l=[{value:"Data Scope (You can come back to this section later)",id:"data-scope-you-can-come-back-to-this-section-later",children:[]},{value:"Build a chat bot with NLP and use External APIs",id:"build-a-chat-bot-with-nlp-and-use-external-apis",children:[]},{value:"Enhance the Tutorial Bot",id:"enhance-the-tutorial-bot",children:[]},{value:"Facebook Channel",id:"facebook-channel",children:[]},{value:"Analytics Integration",id:"analytics-integration",children:[]},{value:"User Experience",id:"user-experience",children:[]}],c={rightToc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"New to Convai? Start from ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"./understanding-convai"}),"Understanding Convai")," guide."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Pre-requisites integrations"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Channel",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Facebook"),Object(i.b)("li",{parentName:"ul"},"Twilio"))),Object(i.b)("li",{parentName:"ul"},"NLP",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Dialogflow"))),Object(i.b)("li",{parentName:"ul"},"Analytics",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Dashbot")))),Object(i.b)("h2",{id:"data-scope-you-can-come-back-to-this-section-later"},"Data Scope (You can come back to this section later)"),Object(i.b)("p",null,"In Convai, we store data in three different scopes - context(execution), session, user.\nContext(execution) data only exists in an execution(before the next user input).\nSession data by default exists 24 hours, and you are able to change the session length in the bot\u2019s settings.\nUser data is considered as persistent data, it exists as long as the user exists.\nIn Set Data Node, we use the prefix \u201cd.\u201d, \u201cs.\u201d, \u201cu.\u201d before the key of the data to announce the data is in Context(Execution) Scope, Session Scope or User Scope."),Object(i.b)("h2",{id:"build-a-chat-bot-with-nlp-and-use-external-apis"},"Build a chat bot with NLP and use External APIs"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Login to Convai Studio.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Click on the \u201cMake Bot\u201d Button to begin making your bot.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"In the name field enter \u201cTutorial Bot\u201d."))),Object(i.b)("ol",{start:4},Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"After the bot is created, you will be taken to the bot\u2019s Dashboard by default. Click on the double right arrow button at the bottom of the left side panel to view different Side Navigation(we will refer to it as Nav by short) of this bot.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Go to Graph in the Nav. The majority of the work with your bot will take place here. You can zoom in/out using your mouse\u2019s wheel and left-click drag on empty space to move your view of the graph..")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"In this tutorial we will be making a quiz bot that uses NLP and External API. Let\u2019s add the NLP integration as a starting point. You can always check the Integrations document if you don\u2019t understand what we are doing here. Here we will use DialogFlow as the bot\u2019s NLP.\nGo to Settings from Nav. "),Object(i.b)("p",{parentName:"li"},"  Under the Development Environment section, click on Edit"),Object(i.b)("p",{parentName:"li"},"  Scroll down to the bottom to find the Integrations section, select DialogFlow and then click on the DialogFlow Configuration, import the DialogFlow JSON file and click on Save.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"The bot\u2019s NLP Integration is set. Let\u2019s go back to the graph via Nav."),Object(i.b)("p",{parentName:"li"},"Go to Extension Graph by clicking on the Extension Paginator"))),Object(i.b)("p",null,"  Add the DialogFlow Node to the graph. Connect it between the Request Node and Main Node for NLP to function."),Object(i.b)("p",null,"  Now you are able to use NLP from Intent Links by selecting the DialogFlow intents"),Object(i.b)("p",null,"Back to the Main Graph by clicking the Paginator\nCreate a Module from the Context Menu by right clicking anywhere on the graph"),Object(i.b)("p",null,"Rename the Module as \u201cGet Questions\u201d, and connect it to the Any Time System Node"),Object(i.b)("p",null,"Click on the link, change the link type to Intent Link, select AskQuestion(DialogFlow) as the Intent. Any User Input from the Any Time Node that matches this intent will proceed to the Get Questions Module."),Object(i.b)("p",null,"The AskQuestion Intent in DialogFlow looks like this:"),Object(i.b)("p",null,"The \u201ctriviacategory\u201d entity will be used in the script to call the Trivia API to get quiz questions in different categories. This parameter will be saved in the execution scope."),Object(i.b)("p",null,"Double click on the Get Question Module to get inside its graph."),Object(i.b)("p",null,"Click on the Input Node, add a Module Variable like the following for the script to use"),Object(i.b)("p",null,"Create a Script Node from Context Menu and Rename it as \u201cGet Questions\u201d, link it to the Input Node of this Module."),Object(i.b)("p",null,"Fill the following code in the Script Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios');\n\nmodule.exports = async function main() {\n    try {\n        let amount = modvars.qAmount; //module variable\n        \n        //get triviacategory from Context Data\n        let category = ctx.get(\"triviacategory\"); \n        category = category || '';\n        \n        //set up the baseUrl for API call\n        let baseUrl = `https://opentdb.com/api.php?amount=${amount}&category=${category}`;\n        \n        let {data} = await axios.get(baseUrl);\n        let questions = data.results;\n        \n        //set Session Data questions equal to the result from API Call\n        setSession(\"questions\", questions)\n    } catch (e) {\n        console.error(e.message)\n    }\n}\n")),Object(i.b)("p",null,"Here we use AXIOS as the HTTP library to call the Open Trivia Database API to get Quiz questions and store data of questions in the Session Scope Data. Script in Script Node is basically JavaScript, you can use AXIOS or any other HTTP libraries to call external APIs. You can read the document about Context in Script if you want to know what the script does exactly here.\nGo to the Dev Console on the Right Side Panel (we will refer to it as Side Panel for short). Type \u201cAsk a film question\u201d and hit Enter. Click on View under the bot\u2019s response, scroll down a little bit to inspect the Session Data and the Entity we got from DialogFlow, that is what the Script Node did for us."),Object(i.b)("p",null,"If the AskQuestion Intent did not match, session data will look like this"),Object(i.b)("p",null,"We have the Get Question Module Ready, let\u2019s add another Module named \u201cAsk Question\u201d on the Main Graph, connect it after the Get Question Module. Double click to enter its graph. "),Object(i.b)("p",null,"Create a graph like below:"),Object(i.b)("p",null,"Edit the script of Format Question Script Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'const _ = require(\'lodash\');\n\nmodule.exports = async function main() {\n    try {\n        \n        //for challenge, save the index\n        let index = ctx.session.get("index");\n        let currentQuestion = {};\n        if(index === undefined){\n            index = 0;\n        }\n        \n        //get one question from Session Data\n        q = ctx.session.get(\'questions\')[index];\n        \n        let options = [];\n        \n        //set question type in Context Data\n        //multiple choice or true/false\n        if (q.type === "boolean") {\n            set("type", "tf");\n        } else {\n            set("type", "mc");\n        }\n        \n        options.push(q.correct_answer);\n        \n        q.incorrect_answers.forEach(o => options.push(o));\n    \n        //shuffle the answer options\n        options = _.shuffle(options);\n    \n        options.forEach((o, i) => {\n            if (o === q.correct_answer) {\n                currentQuestion.correctIndex = i;\n            }\n        });\n        \n        //replace character code to character\n        question = _.replace(_.replace(q.question, "&quot;", \'"\'), "&", "&amp;");\n    \n        //put the currentQuestion things in one object\n        currentQuestion.options = options;\n        currentQuestion.question = question;\n        currentQuestion.correctAnswer = q.correct_answer;\n        \n        //set currentQuestion in Session Data\n        setSession("currentQuestion", currentQuestion);\n    } catch (e) {\n        console.log(e.message);\n    }\n}\n')),Object(i.b)("p",null,"Here we used the Lodash utility library to format quiz questions. As mentioned before, Script Node is just JavaScript, you can use any JavaScript features here.\nEdit Question Response Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<response>\n    <message typing="1">\n    <text>{{ session.data.question }}\n    {%- for op in session.data.options -%}\n                {{- forloop.index -}}. {{ op }}\n    {% endfor %}\n    </text>\n    {% for op in session.data.options %}\n                <qr value="{{ forloop.index | minus: 1 }}">{{ op }}</qr>\n        {% endfor %}\n    </message>\n</response>\n')),Object(i.b)("p",null,"The Response Node is in Liquid Template. The preview of this response will look like this:"),Object(i.b)("p",null,'Edit Validate Answer Script Node:\nmodule.exports = async function main() {\n//user input\ntxt = ctx.text.replace("%s+", "");\n//correct index\ncorrect = ctx.session.get("currentQuestion").correctIndex;'),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),'if (txt == correct) {\n    set("correct", true);\n} else {\n    set("incorrect", true);\n}\n')),Object(i.b)("p",null,"}"),Object(i.b)("p",null,"Edit Correct, Incorrect Response Nodes:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<response>\n    <message>\n        <text>Correct! Added 1 to your score.</text>\n    </message>\n</response>\n\n<response>\n    <message>\n        <text>Incorrect! Subtracted 1 to your score.</text>\n    </message>\n</response>\n")),Object(i.b)("p",null,'Edit Update Point Script Node:\nmodule.exports = async function main() {\n//get point from User Data\npoint = ctx.user.get("point");'),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),'//set point to 0 if it does not exist\nif (point === undefined) {\n    point = 0;\n}\n\n//get correct or incorrect from Context Data\nif (ctx.get("correct")) {\n    point++;\n}else if (ctx.get("incorrect")){\n    point--;\n}else {\n    point += 0;\n}\n\n//set point in User Data\nsetUser("point",point);\n')),Object(i.b)("p",null,"}"),Object(i.b)("p",null,'Notice that Validate Answer Script Node has two links to two Response Nodes. We need to take some action on these links otherwise the flow of the graph will always go to the Correct Response Node.\nReview the script code in Validate Answers Script Node, it sets the execution scope variable \u201ccorrect\u201d to true if the answer is correct, otherwise it sets \u201cincorrect\u201d to true. We can take this as an advantage in Data Equals Link (Actually the Validate Answers Script Node is intended to do so).\nmodule.exports = async function main() {\n//user input\ntxt = ctx.text.replace("%s+", "");\n//correct index\ncorrect = ctx.session.get("currentQuestion").correctIndex;'),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),'if (txt == correct) {\n    set("correct", true);\n} else {\n    set("incorrect", true);\n}\n')),Object(i.b)("p",null,"}"),Object(i.b)("p",null,"Set the link between Validate Answer Script Node and Correct Response Node to be Data Equals Link. Set Field Type as Data, Field Name as \u201ccorrect\u201d, Operation as Exists."),Object(i.b)("p",null,"Set the link between Validate Answer Script Node and Incorrect Response Node to be Data Equals Link. Set Field Type as Data, Field Name as \u201cincorrect\u201d, Operation as Exists."),Object(i.b)("p",null,"After the bot updates the user\u2019s point, the stored quiz questions in Session Data are no longer useful. These data should be deleted (clean up). So we add a Delete Data Node at the end of this Module."),Object(i.b)("p",null,"Back to the Main Graph, add a Delete Data Node after the Ask Questions Module."),Object(i.b)("p",null,"We will explain why we don\u2019t delete s.questions inside the Ask Questions Module in the next section. You can inspect that after the user answers the quiz question, questions stored in Session Data are cleared."),Object(i.b)("p",null,"Go to Dev Console in the Side Panel, send \u201cAsk a film question\u201d to the bot. The Bot will respond with the quiz question and you can play with it."),Object(i.b)("p",null,"Congratulations, you have built your first Convai chatbot. In this section, you have learned how to use NLP via intent links, and how to call external APIs via Script Nodes. In the next section, we will enhance the bot by reusing the modules you created in this section, and give you an image on how convenient to develop a bot with Modules.\nThe final Main graph looks like this:"),Object(i.b)("h2",{id:"enhance-the-tutorial-bot"},"Enhance the Tutorial Bot"),Object(i.b)("p",null,"In this section, we are going to add a challenge feature which allows the user to answer ten quiz questions and show the user\u2019s final score. And a Get Point feature allows the user to get its points and reset it. And Finally, add a welcome message to give a hint to the user on how to interact with the bot.\nOn the Main Graph, create a module named \u201cChallenge\u201d and connect it to Any Time System Node with Challenge intent Link, enter its graph."),Object(i.b)("p",null,"The Challenge Intent in DialogFlow:"),Object(i.b)("p",null,"Create the graph like below (Set Loop Index is a Set Data Node):"),Object(i.b)("p",null,"Notice that we are reusing the module we created before - Get Questions and Ask Question Module (Modules has an icon on its top-left corner). When you develop your own bot, think carefully about how to modularize your bot functionalities so that you can reuse them anywhere you need, this makes the development process very flexible.\nEdit the Challenge Starts Response Node:"),Object(i.b)("response",null,Object(i.b)("message",null,Object(i.b)("text",null,"Let's start the challenge!"))),Object(i.b)("p",null,"Remember in the Main graph, the Get Questions Module is connected to the Any Time system Node with AskQuestion intent link. Think Any Time Node as a User Input Node. Therefore, set the link between the User Input Node and Get Questions Module to be AskQuestion intent link."),Object(i.b)("p",null,"Click on the Get Questions Module, edit its module variable \u201cqAmount\u201d to 10 in order to get 10 questions from the Trivia API."),Object(i.b)("p",null,"We have got 10 quiz questions from the Get Questions Module, then we need the user to answer these 10 questions. However, the Ask Question Module only asks and lets the user answer one question. Using a loop to loop 10 times of the Ask Question Module is a straightforward strategy here.\nEdit the Set Loop Index Set Data Node:"),Object(i.b)("p",null,'Edit Index++ Script Node:\nmodule.exports = async function main() {\n//get index from Session Data\nlet index = ctx.session.get("index");\nindex++;\n//set index in Session Data\nsetSession("index",index);\n}'),Object(i.b)("p",null,"We need to determine when the loop is finished by using Data Equals Link."),Object(i.b)("p",null,"This loop can be illustrated in the following pseudo-code\nindex = 0 // Set Loop Index Node\nstart loop\nAsk Questions\nindex++  // Index++ Node\nif (index == 10)\nend loop\n-> Delete Data Node"),Object(i.b)("p",null,"Edit Delete Data Node:"),Object(i.b)("p",null,"Remember that we have deleted s.currentQuestions inside the Ask Question Module, if we delete s.questions we got from the API call in that module then we are not able to make the bot ask the next 9 questions in the Challenge Module. So we delete s.questions outside of the Ask Question Module.\nEdit Final Score Response Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<response>\n    <message>\n        <text>You have finished the challenge. Your final score is: {{user\\.data\\.point}}</text>\n    </message>\n</response>\n")),Object(i.b)("p",null,"The execution of Challenge Module:"),Object(i.b)("p",null,"We have the Challenge Module ready, now we need a Get Point Module for the user to get its score or reset it. Create this Module on the Main graph and connect it to Any Time system Node with GetPoints intent link."),Object(i.b)("p",null,"GetPoints Intent in DialogFlow:"),Object(i.b)("p",null,"Inside the module, create the graph (Reset Point is Set Data Node):"),Object(i.b)("p",null,"Edit Your Score Response Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<response>\n    <message>\n        <text>Your Score is: {{user.data.point}}\nDo you want to reset your score to Zero?\n</text>\n    </message>\n</response>\n")),Object(i.b)("p",null,"This Response Prompts the user to reset its point or not. Use Affirm intent link to ensure that the flow goes to Reset Point Node if the user confirms to reset its point. Otherwise prompt a Continue message."),Object(i.b)("p",null,"Edit Reset Point Set Data Node:"),Object(i.b)("p",null,"Edit Continue Response Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<response>\n    <message>\n        <text>You can continue on what you want to do.</text>\n    </message>\n</response>\n")),Object(i.b)("p",null,"Edit Reseted Point Response Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<response>\n    <message>\n        <text>Your score is set to Zero!</text>\n    </message>\n</response>\n")),Object(i.b)("p",null,"The execution of Get Point Module:"),Object(i.b)("p",null,"The main functionalities of this bot is set. But we do need a welcome message. A user is new to this bot, and has completely no idea how this bot works. Welcome message is an essential tool.\nCreate the Welcome Response Node, link it to Start and Any Time System Node with Welcome intent link."),Object(i.b)("p",null,"Welcome Intent in DialogFlow:"),Object(i.b)("p",null,"Edit the Welcome Response Node:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),"<response>\n    <message>\n        <text>Hi I am the trivia bot. How can I help you?</text>\n    </message>\n</response>\n")),Object(i.b)("p",null,"Here is just a demonstration of the welcome message, you can add more information to optimize user experience.\nThe final graph of the enhanced Tutorial Bot:"),Object(i.b)("p",null,"The overall execution of the enhanced Tutorial Bot:"),Object(i.b)("p",null,"That\u2019s it! You have learned how to create a bot with NLP and External APIs, and how to use Modules to make your development process flexible. Now let\u2019s proceed to integrate the bot into Facebook"),Object(i.b)("h2",{id:"facebook-channel"},"Facebook Channel"),Object(i.b)("p",null,"In this section, we will integrate the bot into Facebook so that you can chat to the bot on Facebook.\nIn Convai, go to Settings via Side Nav. Add Facebook integration, leave the configurations blank and save it. For now you have Facebook and DialogFlow integrations."),Object(i.b)("p",null,"Login to Facebook for Developer. Click on My Apps"),Object(i.b)("p",null,"Click on Add a New App, choose Manage Business Integrations"),Object(i.b)("p",null,"Enter the App Display Name and choose Just me to use the app for demonstration. Click Create App ID and confirm the security check."),Object(i.b)("p",null,"On the left side panel, click on the + button on the right of PRODUCTS."),Object(i.b)("p",null,"Find Messenger and click Set Up."),Object(i.b)("p",null,"Go to Settings -> Basic, copy the App Secret into Convai Facebook Integration Configuration"),Object(i.b)("p",null,"On Facebook for Developer, go back to Messenger Settings"),Object(i.b)("p",null,"Scroll down a little bit to find the Access Tokens section, click on Add or Remove Pages"),Object(i.b)("p",null,"A new window will pop up, click Continue."),Object(i.b)("p",null,"Select Convai Tutorial Bot, click Next."),Object(i.b)("p",null,"Click Done"),Object(i.b)("p",null,"Click OK"),Object(i.b)("p",null,"You are brought back to the Messenger Settings. In the Access Tokens section, you can find the created Page, click on Generate Token."),Object(i.b)("p",null,"Check I Understand and copy the generated Page Token in Convai Facebook Configuration."),Object(i.b)("p",null,"Save the Facebook Integration Configuration in Convai, click the < button, copy the Facebook webhook URL."),Object(i.b)("p",null,"Back in Facebook Messenger Settings, Click Done on the Generate Token page. Scroll down to find the Webhooks Section, click on Add Callback URL."),Object(i.b)("p",null,"Fill the Callback URL with the Facebook webhook URL copied in Convai"),Object(i.b)("p",null,"Next, go back to Convai, open the Facebook Integration Configuration, enter any password you like in the Verification Token field and Save it. Here we use \u201cconvai\u201d as the Verification Token for demonstration, you can use anything more secure you like. "),Object(i.b)("p",null,"In Facebook for Developers, enter the Verification Token you entered and saved in Convai. Click Verify and Save."),Object(i.b)("p",null,"Next you need to Add Subscription for the webhook we added in the previous step.\nIn the Webhook Section at Convai Tutorial Bot Page, click Add Subscription. Check messages, messaging_postbacks, message_deliveries, message_reads and Save."),Object(i.b)("p",null,"For your own developed bot, you might want to read Facebook Messenger\u2019s Documentation about the webhook subscription.\nNow the bot is integrated in Facebook Channel, you don\u2019t need to do anything else, it just works. Let\u2019s test it out.\nLogin to Messenger with your Facebook Developer Account, start a New Message, enter the bot\u2019s name (Convai Tutorial Bot, or your own Facebook App name)."),Object(i.b)("h2",{id:"analytics-integration"},"Analytics Integration"),Object(i.b)("p",null,"Convai by itself has a Dashboard of Analytics, but you can use other chatbot analytics, such as Dashbot. In this section, we will use Dashbot integration to extend the Analytics in the bot.\nIn Convai, go to settings, add Dashbot integration, leave the Dashbot API Key configuration empty. "),Object(i.b)("p",null,"Login to Dashbot, click on Add Chatbot."),Object(i.b)("p",null,"Fill in the bot\u2019s name and select \u201cUniversal\u201d as the Dashbot platform. Click on Register."),Object(i.b)("p",null,"Copy the API key into Convai\u2019s integration configuration and Save it."),Object(i.b)("p",null,"Back to the bot\u2019s graph. Go to Extension Graph via Paginator.\nAdd a Dashbot Node by Context Menu"),Object(i.b)("p",null,"In Dashbot under the Integration Code Section, click View Reports to go to the Dashboard."),Object(i.b)("p",null,"Back to Convai. Do some simple execution in the Dev Console."),Object(i.b)("p",null,"In Dashbot dashboard, you can see that the Live Message Rate has changed, and in Recent Transcripts, there\u2019s a \u201cdev-console-...\u201d which means Dashbot has recorded the transcript of the Dev Console execution in Convai. The other one is the just the execution we tested for our Facebook integration."),Object(i.b)("h2",{id:"user-experience"},"User Experience"),Object(i.b)("p",null,"Let\u2019s take a tour back to the execution of the bot we built. You may already find out that it is ambiguous for new users of this bot. In this section, we will optimize the bot\u2019s response and add some Fallbacks to unknown User Inputs. By the way, you don\u2019t need to do any other work for Facebook Channel as Convai does it for you, it just works!\nGo to the Main Graph of the bot\nObserve the graph, you can find that there\u2019s a situation we did not handle. When the user input is not one of the intents in the graph, the bot will not respond."),Object(i.b)("p",null,"In Dev Console, we are able to see this No responses received message, but not in other Channels like Facebook. We need to handle this by using Fallback.\nCreate a new Module named \u201cFallback\u201d. Connect it to the Any Time System Node with a basic link - user input is anything other than the intents we have on other modules and nodes. "),Object(i.b)("p",null,"Edit the graph of the Fallback Module"),Object(i.b)("p",null,"Edit the General Fallback Response Node"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<response>\n    <message>\n        <text>Sorry, I don\'t understand.</text>\n        <qr value="ask a question">A single Quiz</qr>\n        <qr value="challenge me">Challenge 10 Quizzes</qr>\n        <qr value="what is my point">Check your score</qr>\n    </message>\n</response>\n')),Object(i.b)("p",null,"The Preview of this Response looks like this:"),Object(i.b)("p",null,"This response uses Quick Reply. Quick Replies gives the user a convenient way to send predefined messages to the bot by clicking on them. Use this wisely as the user may rely solely on quick reply, in our case, the \u201cAsk a question\u201d quick reply asks a question of random category for a user to answer. The bot is capable of user inputs like \u201cAsk sports questions\u201d, this is more about the prompt for user input, we will discuss it later.\nBy its nature, Fallback should always be considered after a User Input Node (as well as Any Time System Node which we have covered). But sometimes it is not necessary. For example in Ask Question Module, we validate user input which gives only two results - correct or incorrect answer in the Validate Answer Script Node. The execution flow is closed, unlike the flow in the Main graph before we added the Fallback Module."),Object(i.b)("p",null,"We can find the execution flow through the User Input Node in the Challenge Module is not closed. Users could input anything that does not match the AskQuestion Intent. We can use Quick Replies in Challenge Starts Response Node, but this makes the AskQuestion Intent meaningless and there are too many categories of questions, we might need to add a bunch of redundant Quick Replies. So we need a Fallback to handle this.\nConnect the Fallback Module to the User Input Node."),Object(i.b)("p",null,"But the General Fallback Response does not fit in this situation. Because all we want is to prompt the user input to match AskQuestion intent."),Object(i.b)("p",null,"We need another Fallback Response for this situation. Add a Set Data Node before Fallback Module. This makes sure the bot knows which Fallback Response it should go to."),Object(i.b)("p",null,"Edit Fallback Module. If d.challengeFallback, that means the execution flow comes from the Challenge Module. Since d.challengeFallback is in the Context(Execution) scope, it is deleted every time there\u2019s a user input."),Object(i.b)("p",null,"Edit Challenge Fallback Response Node"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<response>\n    <message>\n        <text>Sorry, I don\'t understand.\n        \nType "ask [category] questions" to start challenge\n\n[category] can be any category of questions you\'d like to challenge, or you can just type "ask questions" to challenge questions from random categories.\n</text>\n    </message>\n</response>\n')),Object(i.b)("p",null,"Using Fallback optimizes User Experience when the user input something wrong. And it is the bot developer\u2019s responsibility to let users know how to do things right. That means we need to tell the user how to do things correctly in ANY Response Node that prompts a user input.\nGo to Main Graph, edit the Welcome Response Node"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<response>\n    <message>\n        <text>Hi, I am the trivia bot.\n        \nYou can do a quiz question by type "ask a [category name or nothing] question". \n        \nAnd I can make you a challenge of 10 questions, type "challenge me".\n\nIf you want to know your point, type "what is my point"\n</text>\n    </message>\n</response>\n')),Object(i.b)("p",null,"Go to Challenge Module, edit the Challenge Starts Response Node"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<response>\n    <message>\n        <text>Preparing challenge...\n\nType "ask [category or nothing] questions" to start the challenge       \n</text>\n    </message>\n</response>\n')),Object(i.b)("p",null,"The overall execution of the User Experience Optimized bot"),Object(i.b)("p",null,"Congratulations, you have learned all of the basics you need to develop a chatbot in Convai. You can always check back here if you have any questions. It is good for you to start developing your own bot and check out other detailed documentations of Convai."))}u.isMDXComponent=!0},219:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return p}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),u=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r({},t,{},e)),n},b=function(e){var t=u(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=u(n),d=o,p=b["".concat(s,".").concat(d)]||b[d]||h[d]||i;return n?a.a.createElement(p,r({ref:t},c,{components:n})):a.a.createElement(p,r({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var c=2;c<i;c++)s[c]=n[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},220:function(e,t,n){"use strict";var o=n(0),a=n(49);t.a=function(){return Object(o.useContext)(a.a)}},221:function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));n(222);var o=n(220);function a(e){var t=(Object(o.a)().siteConfig||{}).baseUrl,n=void 0===t?"/":t;if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?n+e.slice(1):n+e}},222:function(e,t,n){"use strict";var o=n(12),a=n(24),i=n(223),s="".startsWith;o(o.P+o.F*n(224)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=a(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),o=String(e);return s?s.call(t,o,n):t.slice(n,n+o.length)===o}})},223:function(e,t,n){var o=n(73),a=n(25);e.exports=function(e,t,n){if(o(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(a(e))}},224:function(e,t,n){var o=n(2)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[o]=!1,!"/./"[e](t)}catch(a){}}return!0}}}]);